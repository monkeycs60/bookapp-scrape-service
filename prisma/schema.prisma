generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Post {
  id        String     @default(cuid()) @id
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model User {
  id            String       @default(cuid()) @id
  name          String?    
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  mainSpecialty String?
  subSpecialties String[]
  keywords String[]
  hasCompletedOnboarding Boolean @default(false)
  hasUserDismissedOnboarding Boolean @default(false)
  onboardingStep Int @default(1)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  feeds         Feed[]
  favoriteLists FavoriteList[]
  toReadLater   UserToReadLater[]
  readingHistory UserReadingHistory[]
  journalFollows JournalFollow[]
  @@map(name: "users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id          String   @id @default(cuid())
  title       String   @unique
  authors     String[]
  originalSourceType String?
  sourceType  String?
  date        String?
  doi         String?
  url         String
  source      String
  keywords    String[]
  image       String[]
  isOpenAccess Boolean @default(false)
  vectorSummary String?
  abstract    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  favoriteLists ArticlesInFavLists[]
  toReadLater UserToReadLater[]
  readingHistory UserReadingHistory[]
}

model Feed {
  id          String   @id @default(cuid())
  name        String
  journals    String[]
  types       String[]
  timeline    String
  keywords    String[]
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FavoriteList {
  id        String     @id @default(cuid())
  name      String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  articles  ArticlesInFavLists[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ArticlesInFavLists {
  id            String       @id @default(cuid())
  favoriteList  FavoriteList @relation(fields: [favListId], references: [id], onDelete: Cascade)
  favListId     String
  articleId     String
  article       Article      @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())

  @@unique([favListId, articleId])
}

model UserToReadLater {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}

model UserReadingHistory {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}

model JournalFollow {
  id            String   @id @default(cuid())
  source        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, source])
  @@index([source])
}